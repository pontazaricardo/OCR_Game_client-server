package ocrGame;

import java.awt.Color;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.Random;
import java.util.TimerTask;
import java.util.Timer;
import javax.swing.JOptionPane;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author liwuen
 */
public class HumanOCRGame extends javax.swing.JFrame {

    public static int defaultPort = 1500;
    public static String defaultHost = "localhost";

    public static int animationFrame = 0;
    public static int tankAnimationFrame = 0;
    public static int victoryAnimationFrame = 0;
    public static int waitVictory = 0;
    public static int totalWaitVictory = 65;

    public boolean flagFinalAnimation = false;

    public String[] fileNamesUnknown = new String[]{"01-02.png","01-04.png","01-06.png","01-07.png","01-09.png","01-10.png","02-02.png"};
    //public String[] fileNamesUnknown = new String[]{"01-02.png","01-04.png","01-06.png","01-07.png","01-09.png","01-10.png","02-02.png","02-03.png","02-06.png","03-01.png","03-03.png","03-06.png","03-07.png","03-08.png","04-01.png","04-02.png","04-03.png","04-04.png","04-06.png","05-01.png","05-04.png","05-05.png","05-07.png","06-02.png","06-03.png","06-04.png","06-06.png","07-02.png","07-05.png","07-08.png","08-01.png","08-03.png","08-04.png","08-06.png","08-08.png","08-09.png","08-10.png","09-01.png","09-02.png","09-03.png","09-04.png","09-07.png","09-09.png","10-02.png","10-03.png","10-04.png","11-01.png","11-02.png","11-04.png","11-06.png","11-07.png","12-04.png","12-05.png","12-08.png","13-01.png","13-02.png","13-03.png","13-05.png","13-06.png","13-08.png","13-09.png","14-01.png","14-02.png","14-03.png","14-04.png","14-05.png","14-06.png","14-07.png","14-08.png","14-09.png","14-11.png","15-04.png","15-05.png"};

    public String[] listUnknown = new String[fileNamesUnknown.length];
    ;
    
    public static int actualPositionKnown = 0;
    public static int actualPositionUknown = 0;

    public static TimerTask timerTask;
    public static TimerTask timerTask2;

    public static Clip clip;

    public static String pathToSave = "";

    /**
     * Creates new form HumanOCRGame
     */
    //server data
    public Client client;
    public static boolean connected;
    public static boolean statusLabelConnected=false;
    public static boolean statusLabelAdversary=false;
    
    public static int waitingForAdversary=0;
    
    public static final long serialVersionUID = 1L;

    public HumanOCRGame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabelUnknown = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabelPoints = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabelServerStatus = new javax.swing.JLabel();
        jLabelAdversaryStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/tank--0-.gif"))); // NOI18N

        jLabel3.setBackground(new java.awt.Color(0, 204, 204));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/b2.jpg"))); // NOI18N
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel3.setOpaque(true);

        jButton1.setText("Start game");
        jButton1.setEnabled(false);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Words:");

        jLabel7.setText("User input:");

        jTextField1.setEnabled(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabelPoints.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabelPoints.setForeground(new java.awt.Color(255, 255, 0));

        jButton2.setText("Save output...");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setText("Server:");

        jLabel6.setText("127.0.0.1");

        jLabel8.setText("Port:");

        jLabel9.setText("1500");

        jLabel10.setText("Server Status:");

        jLabel11.setText("Disconnected");

        jLabel12.setText("Adversary status:");

        jLabel13.setText("Disconnected");

        jLabelServerStatus.setBackground(new java.awt.Color(255, 0, 0));
        jLabelServerStatus.setText("   ");
        jLabelServerStatus.setOpaque(true);

        jLabelAdversaryStatus.setBackground(new java.awt.Color(255, 0, 0));
        jLabelAdversaryStatus.setText("   ");
        jLabelAdversaryStatus.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelServerStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelAdversaryStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabelServerStatus)
                    .addComponent(jLabelAdversaryStatus)))
        );

        jMenu1.setText("File");

        jMenu3.setText("Music");

        jMenuItem1.setText("Start music");
        jMenuItem1.setEnabled(false);
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Stop music");
        jMenuItem2.setEnabled(false);
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseClicked(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenu1.add(jMenu3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Connection");

        jMenuItem3.setText("Server IP...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Server Port...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(12, 12, 12)
                        .addComponent(jLabelUnknown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabelUnknown)
                    .addComponent(jLabelPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {                                      
        if (jButton1.isEnabled()) {
            //verify data
            // try creating a new Client with GUI
            client = new Client(defaultHost, defaultPort, "player", this);
            // test if we can start the Client
            if (!client.start()) {
                return;
            }
            connected = true;
            client.sendMessage(new ChatMessage(ChatMessage.WHOISIN, ""));
            jLabel13.setText("Waiting for adversary...");
            waitingForAdversary=1;
            
            jMenuItem3.setEnabled(false);
            jMenuItem4.setEnabled(false);

        }
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
    }                                     

    public void startGame() {
        jTextField1.setEnabled(true);
        jLabel1.setBounds(180, 300, 128, 128);
        jLabel2.setBounds(900, 350, 153, 106);

        jLabelPoints.setBounds(850, 50, jLabelPoints.getWidth(), jLabelPoints.getHeight());
        //Animation done by timer
        timerTask = new TimerTask() {
            public void run() {
                try {
                    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/mmx--" + animationFrame + "-.gif")));
                    jLabel1.setBounds(180 + (int) ((720 / fileNamesUnknown.length) * actualPositionUknown), 300, 128, 128);

                    jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/tank--" + tankAnimationFrame + "-.gif")));
                    jLabel2.setBounds(900, 350, 153, 106);

                    jLabelPoints.setBounds(850, 50, jLabelPoints.getWidth(), jLabelPoints.getHeight());
                    jLabelPoints.setText("Correct: " + actualPositionUknown + " of " + fileNamesUnknown.length);

                } catch (Exception e) {
                    e.printStackTrace();
                }
                animationFrame++;
                animationFrame = animationFrame % 5;

                tankAnimationFrame++;
                tankAnimationFrame = tankAnimationFrame % 4;
            }
        };

        Timer timer = new Timer();
        timer.scheduleAtFixedRate(timerTask, 0, 100);

        //music
        // Sound
        try { // TODO: Add sound clips if want to add sound when clicking.
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(getClass().getResource("/mmxAnimation/mmx.wav"));
            clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.start();
            jMenuItem2.setEnabled(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        //Set up initial Images
//        jLabelKnown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/known/" + fileNamesKnown[actualPositionKnown])));
        jLabelUnknown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/unknown/" + fileNamesUnknown[actualPositionUknown])));
        waitingForAdversary=2;
        jLabel13.setText("Connected");
    }


    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        //Performed while enter

        if (actualPositionUknown < fileNamesUnknown.length) {

            try {
                String[] splittedString = jTextField1.getText().split(" ");
                System.out.println(jTextField1.getText());

                int sizeOfsplittedString = splittedString.length;
                System.out.println(sizeOfsplittedString);

                if (sizeOfsplittedString != 1) {
                    //Used did not input 1 word. Throws exception
                    throw new IndexOutOfBoundsException();
                }

                String word1 = splittedString[0];

                client.sendMessage(new ChatMessage(ChatMessage.MESSAGE, "WORD INPUT:" + word1));

                jTextField1.setText("");
                jTextField1.requestFocus();

                actualPositionKnown = randInt(0, listUnknown.length - 1);
                //jLabelKnown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/known/" + fileNamesKnown[actualPositionKnown])));
                jTextField1.setEnabled(false);

            } catch (IndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(this, "You have to input only one words.");
                jTextField1.setText("");
                jTextField1.requestFocus();
            }

            
            //TODO: display "waiting for other player"
        }
    }                                           

    public void resultOfTest(String str) {

        if (str.contains("SAME WORDS:")) {
            //word 1 match
            listUnknown[actualPositionUknown] = str.substring(11);
            actualPositionUknown++;

            jLabel1.setBounds(180 + (int) ((720 / fileNamesUnknown.length) * actualPositionUknown), 300, 128, 128);

            if (actualPositionUknown == fileNamesUnknown.length) {
                //User won the game
                jLabel2.setVisible(false);
                JOptionPane.showMessageDialog(this, "You won the game!");

                clip.stop();

                jTextField1.setEnabled(false);
                timerTask.cancel();

                //save to txt file
                try {
                    File file = new File(pathToSave);
                    FileWriter fileWriter = new FileWriter(file);
                    for (int w = 0; w < fileNamesUnknown.length; w++) {
                        fileWriter.write(fileNamesUnknown[w] + " " + listUnknown[w]);
                        fileWriter.write(System.getProperty("line.separator"));
                    }

                    fileWriter.flush();
                    fileWriter.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                //Winning sounds
                try { //TODO: Add sound clips if want to add sound when clicking.
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(getClass().getResource("/mmxAnimation/victory.wav"));
                    clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    jMenuItem1.setEnabled(false);
                    jMenuItem2.setEnabled(false);
                    //jButton2.setEnabled(false);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

                timerTask2 = new TimerTask() {
                    public void run() {
                        try {

                            if (waitVictory < totalWaitVictory) {
                                jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/victory0.gif")));
                            } else {
                                jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/victory" + victoryAnimationFrame + ".gif")));
                                victoryAnimationFrame++;
                                victoryAnimationFrame = victoryAnimationFrame % 7;
                                flagFinalAnimation = true;
                            }

                            jLabel1.setBounds(180 + (int) ((720 / fileNamesUnknown.length) * actualPositionUknown), 300, 128, 128);

                            jLabelPoints.setText("Correct: " + actualPositionUknown + " of " + fileNamesUnknown.length);
                            jLabelPoints.setBounds(800, 50, jLabelPoints.getWidth(), jLabelPoints.getHeight());

                            waitVictory++;

                            //System.out.println(waitVictory);
                            if ((victoryAnimationFrame == 0) && (flagFinalAnimation)) {
                                timerTask2.cancel();
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                };

                Timer timer2 = new Timer();
                timer2.scheduleAtFixedRate(timerTask2, 0, 100);

                //jLabel1.setVisible(false);
            } else {
                jLabelUnknown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/unknown/" + fileNamesUnknown[actualPositionUknown])));
            }
        } else if (str.contains("ERROR IN WORDS")) {
            JOptionPane.showMessageDialog(this, "Players typed different words. Please try again.");
        }

        jTextField1.setEnabled(true);

    }

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {                                        

    }                                       

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {                                      
        if (jButton2.isEnabled()) {
            JFrame parentFrame = new JFrame();

            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Specify a file to save");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("txt", "txt", "txt");
            fileChooser.setFileFilter(filter);
            int userSelection = fileChooser.showSaveDialog(parentFrame);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                System.out.println("Save as file: " + fileToSave.getAbsolutePath() + ".txt");
                pathToSave = fileToSave.getAbsolutePath() + ".txt";
                jButton1.setEnabled(true);
                jButton2.setEnabled(false);
            }
        }
    }                                     

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        clip.start();
        jMenuItem1.setEnabled(false);
        jMenuItem2.setEnabled(true);
    }                                          

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {                                        

    }                                       

    private void jMenuItem2MouseClicked(java.awt.event.MouseEvent evt) {                                        

    }                                       

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        clip.stop();
        jMenuItem1.setEnabled(true);
        jMenuItem2.setEnabled(false);
    }                                          

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try {
            defaultHost = JOptionPane.showInputDialog(null, "Enter the game server's IP address");
        } catch (Exception e) {
            e.printStackTrace();
            defaultHost = "127.0.0.1";
            JOptionPane.showMessageDialog(this, "Error in Server's IP address. The default IP address will be used instead.");
        }
        jLabel6.setText(defaultHost);
    }                                          

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try {
            defaultPort = Integer.valueOf(JOptionPane.showInputDialog(null, "Enter the game server's port"));
        } catch (Exception e) {
            e.printStackTrace();
            defaultPort = 1500;
            JOptionPane.showMessageDialog(this, "Error in Server's port number. The default port number will be used instead.");
        }
        jLabel9.setText(String.valueOf(defaultPort));
    }                                          

    public static int randInt(int min, int max) {
        Random rand = new Random();
        int randomNum = rand.nextInt((max - min) + 1) + min;
        return randomNum;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HumanOCRGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HumanOCRGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HumanOCRGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HumanOCRGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HumanOCRGame().setVisible(true);
            }
        });

        Timer timer = new Timer();
        TimerTask myTask = new TimerTask() {
            @Override
            public void run() {
                //Change color status
                if (connected){
                    //Is connected to server
                    if(statusLabelConnected){
                        statusLabelConnected=false;
                        jLabelServerStatus.setBackground(Color.GREEN);
                    }else{
                        statusLabelConnected=true;
                        jLabelServerStatus.setBackground(Color.WHITE);
                    }
                }else{
                    //player got disconnected
                    jLabelServerStatus.setBackground(Color.red);
                }
                
                if (waitingForAdversary==0){
                    jLabelAdversaryStatus.setBackground(Color.red);
                }else if (waitingForAdversary==1){
                    if(statusLabelConnected){
                        jLabelAdversaryStatus.setBackground(Color.WHITE);
                    }else{
                        jLabelAdversaryStatus.setBackground(Color.YELLOW);
                    }
                }else if (waitingForAdversary==2){
                    if(statusLabelConnected){
                        jLabelAdversaryStatus.setBackground(Color.WHITE);
                    }else{
                        jLabelAdversaryStatus.setBackground(Color.GREEN);
                    }
                }
                
            }
        };

        timer.schedule(myTask, 500, 500);
    }

    public HumanOCRGame(String host, int port) {
        defaultHost = host;
        defaultPort = port;

    }

    // called by the Client to append text in the TextArea 
    public void append(String str) {
        //ta.append(str);
        //ta.setCaretPosition(ta.getText().length() - 1);
        System.out.println("Mensaje : " + str);

        if (str.contains("Number of users:")) {
            //A new user connected
            int numberOfUsers = Integer.valueOf(str.substring(16));
            System.out.println("Number of Users in append:" + numberOfUsers);

            //startGame();
            if (numberOfUsers == 2) {
                startGame();
            }
        } else if ((str.contains("SAME WORDS:")) || (str.contains("ERROR IN WORDS"))) {
            resultOfTest(str);
        } else if(str.contains("END GAME")){
            connectionFailed();
        }

    }
    // called by the GUI is the connection failed
    // we reset our buttons, label, textfield

    public void connectionFailed() {
        connected = false;
        jLabel11.setText("Disconnected");
        jLabel13.setText("Disconnected");
        jLabelServerStatus.setBackground(Color.red);
        waitingForAdversary=0;
        JOptionPane.showMessageDialog(this, "At least one player cannot be detected. The program will close.");
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }


    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    public javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JLabel jLabelAdversaryStatus;
    private javax.swing.JLabel jLabelPoints;
    public static javax.swing.JLabel jLabelServerStatus;
    private javax.swing.JLabel jLabelUnknown;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}
